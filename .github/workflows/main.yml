# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Beginning workflows

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Building and Pushing Image $IMAGE_TAG
          docker build . -t $IMAGE_TAG
          docker push $IMAGE_TAG
  aks:
    name: "Run on AKS"
    concurrency: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gambtho/aks_create_action@main
        with:
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
          STORAGE_CONTAINER_NAME: ${{ secrets.STORAGE_CONTAINER_NAME }}
          STORAGE_ACCESS_KEY: ${{ secrets.STORAGE_ACCESS_KEY }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          CREATE_ACR: true
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.CLUSTER_NAME }}.azurecr.io
          username: ${{ secrets.ARM_CLIENT_ID }}
          password: ${{ secrets.ARM_CLIENT_SECRET }}

      # Container build and push to a Azure Container Registry (ACR)
      - run: |
          docker build . -t ${{ secrets.CLUSTER_NAME }}.azurecr.io/${{ secrets.APP_NAME }}:${{ github.sha }}
          docker push ${{ secrets.CLUSTER_NAME }}.azurecr.io/${{ secrets.APP_NAME }}:${{ github.sha }}
        name: "Docker push"
      # Set the target Azure Kubernetes Service (AKS) cluster.
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDS }}'
          cluster-name: ${{ secrets.CLUSTER_NAME }}
          resource-group: ${{ secrets.RESOURCE_GROUP_NAME }}

      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ secrets.NAMESPACE }} --dry-run -o json | kubectl apply -f -
      # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ secrets.CLUSTER_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.ARM_CLIENT_ID }}
          container-registry-password: ${{ secrets.ARM_CLIENT_SECRET }}
          secret-name: ${{ secrets.SECRET_NAME }}
          namespace: ${{ secrets.NAMESPACE }}
          force: true

      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            manifests/deployment.yaml
            manifests/service.yaml
            manifests/ingress.yaml
          images: |
            ${{ secrets.CLUSTER_NAME }}.azurecr.io/${{ secrets.APP_NAME }}:${{ github.sha }}
          imagepullsecrets: |
            ${{ secrets.SECRET_NAME }}
          namespace: ${{ secrets.NAMESPACE }}

